name: Windows Executable Release

on:
    workflow_call:
        inputs:
            cli_name:
                type: string
                description: 'The name of the CLI'
                default: 'tfs'
                required: false

jobs:
    pack-windows-executable:
        name: Pack Windows Executable
        runs-on: ubuntu-latest
        steps:
            - uses: actions/checkout@v4
            - uses: actions/setup-node@v4
              with:
                  node-version: lts/*
                  cache: yarn
            - name: Set up Homebrew
              id: set-up-homebrew
              uses: Homebrew/actions/setup-homebrew@master
            - name: Install Homebrew Dependencies
              run: brew install nsis
            - name: Install Node Dependencies
              run: yarn install --network-timeout 600000
            - name: Pack Windows Executable
              run: yarn pack:win
            - uses: actions/upload-artifact@v3
              with:
                  name: packed-windows-executable
                  path: dist/win32
                  retention-days: 3

    upload-windows-executable:
        name: Upload Windows Executable
        needs: [pack-windows-executable]
        runs-on: ubuntu-latest
        env:
            AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
            AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
            AWS_S3_ENDPOINT: ${{ secrets.AWS_S3_ENDPOINT }}
        steps:
            - uses: actions/checkout@v4
            - uses: actions/setup-node@v4
              with:
                  node-version: lts/*
                  cache: yarn
            - uses: actions/download-artifact@v3
              with:
                  name: packed-windows-executable
                  path: dist/win32
            - name: List all the downloaded files (for debugging)
              run: ls -R
              working-directory: dist/win32
            - name: Install Node Dependencies
              run: yarn install --network-timeout 600000
            - name: Upload Binaries to S3
              run: yarn upload:win

    upload-windows-executable-github:
        name: Upload Windows Executable to Github
        needs: [pack-windows-executable]
        runs-on: ubuntu-latest
        permissions:
            contents: write
        steps:
            - uses: actions/checkout@v4
            - uses: actions/download-artifact@v3
              with:
                  name: packed-windows-executable
                  path: dist/win32
            - name: List all the downloaded files (for debugging)
              run: ls -R
              working-directory: dist/win32
            - name: Get Latest SHA
              uses: ./.github/actions/get-latest-sha
              id: get-sha
            - name: Get Latest Tag
              uses: ./.github/actions/get-latest-tag
              id: get-tag
            - name: Upload Binaries to Github (x64)
              uses: svenstaro/upload-release-action@v2
              with:
                  repo_token: ${{ secrets.GITHUB_TOKEN }}
                  file: dist/win32/${{ inputs.cli_name }}-v${{ steps.get-tag.outputs.tag-name }}-${{ steps.get-sha.outputs.sha-short }}-x64.exe
                  tag: v${{ steps.get-tag.outputs.tag-name }}
                  asset_name: ${{ inputs.cli_name }}_v${{ steps.get-tag.outputs.tag-name }}_win32-x64.exe
                  overwrite: true
            - name: Upload Binaries to Github (x86)
              uses: svenstaro/upload-release-action@v2
              with:
                  repo_token: ${{ secrets.GITHUB_TOKEN }}
                  file: dist/win32/${{ inputs.cli_name }}-v${{ steps.get-tag.outputs.tag-name }}-${{ steps.get-sha.outputs.sha-short }}-x86.exe
                  tag: v${{ steps.get-tag.outputs.tag-name }}
                  asset_name: ${{ inputs.cli_name }}_v${{ steps.get-tag.outputs.tag-name }}_win32-x86.exe
                  overwrite: true

    notify-complete-fail:
        if: ${{ failure() || cancelled() }}
        needs: [upload-windows-executable, upload-windows-executable-github]
        name: Notify Windows Executable Release Failed
        runs-on: ubuntu-latest
        steps:
            - name: Checkout the Repository
              uses: actions/checkout@v4
            - name: Slack Notification
              uses: rtCamp/action-slack-notify@v2
              env:
                  SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK_URL }}
                  SLACK_COLOR: '#ff3333'
                  SLACK_USERNAME: CLI Release Bot
                  SLACK_ICON_EMOJI: ':ship:'
                  SLACK_TITLE: 'TFS ClI'
                  SLACK_MESSAGE: 'Windows Executable Release Failed'
                  MSG_MINIMAL: actions url
                  SLACK_FOOTER: Posted automatically using GitHub Actions
